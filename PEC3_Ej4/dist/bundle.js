(()=>{"use strict";var t={404:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TodoController=void 0,e.TodoController=class{constructor(t,e){this.onTodoListChanged=t=>{this.view.displayTodos(t)},this.handleAddTodo=t=>{this.service.addTodo(t)},this.handleEditTodo=(t,e)=>{this.service.editTodo(t,e)},this.handleDeleteTodo=t=>{this.service.deleteTodo(t)},this.handleToggleTodo=t=>{this.service.toggleTodo(t)},this.service=t,this.view=e,this.service.bindTodoListChanged(this.onTodoListChanged),this.view.bindAddTodo(this.handleAddTodo),this.view.bindEditTodo(this.handleEditTodo),this.view.bindDeleteTodo(this.handleDeleteTodo),this.view.bindToggleTodo(this.handleToggleTodo),this.onTodoListChanged(this.service.getTodos())}}},524:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Todo=void 0,e.Todo=class{constructor({text:t,complete:e}={text:"",complete:!1}){this.id=this.uuidv4(),this.text=t,this.complete=e}uuidv4(){return(1e7.toString()+(-1e3).toString()+(-4e3).toString()+(-8e3).toString()+(-1e11).toString()).replace(/[018]/g,(t=>(Number(t)^crypto.getRandomValues(new Uint8Array(1))[0]&15>>Number(t)/4).toString(16)))}}},572:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TodoService=void 0;const i=o(524);e.TodoService=class{constructor(){this.todos=JSON.parse(localStorage.getItem("todos")||"[]").map((t=>new i.Todo(t)))}bindTodoListChanged(t){this.onTodoListChanged=t}_commit(t){this.onTodoListChanged(t),localStorage.setItem("todos",JSON.stringify(t))}addTodo(t){this.todos.push(new i.Todo({text:t,complete:!1})),this._commit(this.todos)}editTodo(t,e){this.todos=this.todos.map((o=>o.id===t?new i.Todo(Object.assign(Object.assign({},o),{text:e})):o)),this._commit(this.todos)}deleteTodo(t){this.todos=this.todos.filter((({id:e})=>e!==t)),this._commit(this.todos)}toggleTodo(t){this.todos=this.todos.map((e=>e.id===t?new i.Todo(Object.assign(Object.assign({},e),{complete:!e.complete})):e)),this._commit(this.todos)}getTodos(){return this.todos}}},61:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TodoView=void 0,e.TodoView=class{constructor(){this.app=this.getElement("#root"),this.form=this.createElement("form"),this.input=this.createElement("input"),this.input.type="text",this.input.placeholder="Add todo",this.input.name="todo",this.submitButton=this.createElement("button"),this.submitButton.textContent="Submit",this.form.append(this.input,this.submitButton),this.title=this.createElement("h1"),this.title.textContent="Todos",this.todoList=this.createElement("ul","todo-list"),this.app.append(this.title,this.form,this.todoList),this._temporaryTodoText="",this._initLocalListeners()}get _todoText(){return this.input.value}_resetInput(){this.input.value=""}createElement(t,e){const o=document.createElement(t);return e&&o.classList.add(e),o}getElement(t){const e=document.querySelector(t);if(!e)throw new Error(`Element not found for selector: ${t}`);return e}displayTodos(t){for(;this.todoList.firstChild;)this.todoList.removeChild(this.todoList.firstChild);if(0===t.length){const t=this.createElement("p");t.textContent="Nothing to do! Add a task?",this.todoList.append(t)}else t.forEach((t=>{const e=this.createElement("li");e.id=t.id;const o=this.createElement("input");o.type="checkbox",o.checked=t.complete;const i=this.createElement("span");if(i.contentEditable="true",i.classList.add("editable"),t.complete){const e=this.createElement("s");e.textContent=t.text,i.append(e)}else i.textContent=t.text;const s=this.createElement("button","delete");s.textContent="Delete",e.append(o,i,s),this.todoList.append(e)}))}_initLocalListeners(){this.todoList.addEventListener("input",(t=>{t.target.classList.contains("editable")&&(this._temporaryTodoText=t.target.innerText)}))}bindAddTodo(t){this.form.addEventListener("submit",(e=>{e.preventDefault(),this._todoText&&(t(this._todoText),this._resetInput())}))}bindDeleteTodo(t){this.todoList.addEventListener("click",(e=>{if(e.target.classList.contains("delete")){const o=e.target.parentElement.id;t(o)}}))}bindEditTodo(t){this.todoList.addEventListener("focusout",(e=>{if(this._temporaryTodoText){const o=e.target.parentElement.id;t(o,this._temporaryTodoText),this._temporaryTodoText=""}}))}bindToggleTodo(t){this.todoList.addEventListener("change",(e=>{if("checkbox"===e.target.type){const o=e.target.parentElement.id;t(o)}}))}}}},e={};function o(i){var s=e[i];if(void 0!==s)return s.exports;var d=e[i]={exports:{}};return t[i](d,d.exports,o),d.exports}(()=>{const t=o(572),e=o(61);new(o(404).TodoController)(new t.TodoService,new e.TodoView)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,